

# This file was *autogenerated* from the file SIKEp434.sage
from sage.all_cmdline import *   # import sage library

_sage_const_216 = Integer(216); _sage_const_137 = Integer(137); _sage_const_250 = Integer(250); _sage_const_159 = Integer(159); _sage_const_305 = Integer(305); _sage_const_192 = Integer(192); _sage_const_372 = Integer(372); _sage_const_239 = Integer(239); _sage_const_486 = Integer(486); _sage_const_301 = Integer(301); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5)
import public_values_aux
from public_values_aux import *

load('castryck_decru_shortcut.sage')
load('sandwich_attack.sage')

SIKE_parameters = {
    "SIKEp434" : (_sage_const_216 , _sage_const_137 ),
    "SIKEp503" : (_sage_const_250 , _sage_const_159 ),
    "SIKEp610" : (_sage_const_305 , _sage_const_192 ),
    "SIKEp751" : (_sage_const_372 , _sage_const_239 ),
    "SIKEp964" : (_sage_const_486 , _sage_const_301 ), # removed after NIST round 1
}

# Change me to attack different parameter sets
NIST_submission = "SIKEp434"
a, b = SIKE_parameters[NIST_submission]

print(f"Running the attack against {NIST_submission} parameters, which has a prime: 2^{a}*3^{b} - 1")

print(f"Generating public data for the attack...")
# Set the prime, finite fields and starting curve
# with known endomorphism
p = _sage_const_2 **a*_sage_const_3 **b - _sage_const_1 
public_values_aux.p = p
Fp2 = GF(p**_sage_const_2 , modulus=x**_sage_const_2 +_sage_const_1 , names=('i',)); (i,) = Fp2._first_ngens(1)
R = PolynomialRing(Fp2, names=('x',)); (x,) = R._first_ngens(1)

E_start = EllipticCurve(Fp2, [_sage_const_0 ,_sage_const_6 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ])
E_start.set_order((p+_sage_const_1 )**_sage_const_2 , num_checks=_sage_const_0 ) # Speeds things up in Sage

# Generation of the endomorphism 2i
two_i = generate_distortion_map(E_start)

# Generate public torsion points, for SIKE implementations
# these are fixed but to save loading in constants we can
# just generate them on the fly
P2, Q2, P3, Q3 = generate_torsion_points(E_start, a, b)
check_torsion_points(E_start, a, b, P2, Q2, P3, Q3)

# Generate Bob's key pair
bob_private_key, EB, PB, QB = gen_bob_keypair(E_start, b, P2, Q2, P3, Q3)
solution = Integer(bob_private_key).digits(base=_sage_const_3 )

print(f"If all goes well then the following digits should be found: {solution}")

# ===================================
# =====  ATTACK  ====================
# ===================================

def RunAttack(num_cores):
    return CastryckDecruAttack(E_start, P2, Q2, EB, PB, QB, two_i, num_cores=num_cores)

if __name__ == '__main__' and '__file__' in globals():
    if '--parallel' in sys.argv:
        # Set number of cores for parallel computation
        num_cores = os.cpu_count()
        print(f"Performing the attack in parallel using {num_cores} cores")
    else:
        num_cores = _sage_const_1 

    if '--sandwich' in sys.argv:
        # Use the fact that 2^a - 5*3^b is a sum of squares
        assert NIST_submission == "SIKEp964"
        assert two_squares(_sage_const_2 **a - _sage_const_5 *_sage_const_3 **b)
        recovered_key = SandwichAttack(E_start, P2, Q2, EB, PB, QB, two_i, k=_sage_const_5 , alp=_sage_const_0 )
    else:
        recovered_key = RunAttack(num_cores)

