# solve.py
from pwn import *
h, p = 'localhost', 1337
def inv_mod(a, m):
    # compute's modular inverse using extended euclidean algorithm
    # Extended Euclidean Algorithm
    t, new_t = 0, 1
    r, new_r = m, a
    while new_r != 0:
        quotient = r // new_r
        t, new_t = new_t, t - quotient * new_t
        r, new_r = new_r, r - quotient * new_r
    if r > 1:
        raise ValueError(f"{a} has no inverse modulo {m}")
    if t < 0:
        t += m
    return t

def extract_flag(H, S):
    # Second function
    N = 137
    inv_6 = pow(6, -1, N)  # Modular inverse using pow
    Q = [(s - 5 * h - 14) * inv_6 % N for s, h in zip(S, H)]
    flag = ''.join(chr(q) if 32 <= q <= 126 else '?' for q in Q[:30])
    return flag.rstrip('?')

def main():
    H = [128, 8, 75, 105, 114, 23, 36, 117, 114, 111, 98, 44, 34, 45, 130, 21, 97, 40, 75, 61, 52, 79, 54, 41, 63, 21, 18, 87, 3, 46, 68, 2, 128, 8, 75, 105, 114, 23, 36, 117, 114, 111, 98, 44, 34, 45, 130, 21, 97, 40, 75, 61, 52, 79, 54, 41, 63, 21, 18, 87, 3, 46, 68, 2, 128, 8, 75, 105, 114, 23, 36, 117, 114, 111, 98, 44, 34, 45, 130, 21, 97, 40, 75, 61, 52, 79, 54, 41, 63, 21, 18, 87, 3, 46, 68, 2, 128, 8, 75, 105, 114, 23, 36, 117, 114, 111, 98, 44, 34, 45, 130, 21, 97, 40, 75, 61, 52, 79, 54, 41, 63, 21, 18, 87, 3, 46, 68, 2, 128, 8, 75, 105, 114, 23, 36, 117, 114]
    S = [15, 124, 130, 20, 21, 61, 125, 71, 106, 0, 108, 111, 110, 16, 72, 16, 87, 134, 41, 86, 63, 98, 30, 2, 76, 44, 115, 119, 63, 98, 33, 26, 133, 66, 51, 111, 45, 9, 133, 97, 120, 85, 33, 30, 120, 129, 125, 78, 89, 100, 115, 45, 27, 31, 83, 105, 22, 90, 82, 16, 50, 47, 34, 73, 71, 115, 27, 13, 56, 26, 29, 30, 121, 102, 80, 15, 135, 19, 127, 111, 83, 14, 80, 88, 71, 31, 60, 120, 68, 59, 125, 74, 14, 68, 0, 7, 95, 18, 23, 30, 20, 80, 3, 65, 115, 60, 104, 18, 122, 77, 129, 100, 32, 113, 123, 83, 130, 39, 56, 11, 135, 128, 96, 70, 128, 108, 52, 111, 40, 41, 29, 126, 63, 84, 18, 44, 50]

    # Extract the flag
    flag = extract_flag(H, S)
    print(f"Extracted Flag: {flag.rstrip('?')}")

if __name__ == "__main__":
    main()
